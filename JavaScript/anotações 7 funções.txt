####estrutura 
*function nome(parametros) {
     instruções;
}
*variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela
*quando invocamos o "retunr", a função para de ser executada --> function nome(parametros) {
                                                                     instruções;
                                                                     return; //valor de retorno;
                                                                 }
*uma variável pode armazenar uma função --> const soma = function (a, b) {
                                                              return a + b;
                                                         } 
                                                         soma(1, 2)
                                                         soma(5, 4)

####função auto invocável
*IIFE (ImmediatelyInvoked Function Expression)
*uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada --> (
                                                                                                          function nome(parametros) {
                                                                                                                 let name = "digital innovation one";
                                                                                                                 return name;
                                                                                                          }
                                                                                                          )();
                                                                                                          // digital innovation one
*também pode ser utilizada com parâmetros ou armazenada em uma variável --> (
                                                                            function (a, b) {
                                                                                return a + b;
                                                                            }
                                                                            )(1, 2);

                                                                            const soma = (
                                                                                         function (a, b) {
                                                                                             return a + b;
                                                                                         } 
                                                                            )(5, 4);

####callbacks
*uma função passada como argumento pra outra
*utilizando callbacs você tem maior controle da ordem de chamadas --> const calc = function(operacao, num1, num2){
                                                                                        return operacao(num1, num2);
                                                                                   }
                                                                      const soma = function(num1, num2){
                                                                                        return num1 + num2;
                                                                                   }
                                                                      const sub = function(num1, num2){
                                                                                        return num1 - num2;
                                                                                   }
                                                                      const resultSoma = calc(soma, 1, 2);
                                                                      const resultSub = calc(sub, 1, 2);
                                                                      
                                                                      console.log(reultSub);
                                                                      console.log(resultSoma);

####valores padrão
*atualizações para diminuir código

####arguments
*um array com todos os parâmetros passados quando a função foi invocada
*exemplo --> function findMax() {
               let max = -Infinity;

               for(let i = 0; i< arguments.length; i++) {
                   if (arguments[i] > max) {
                       max = arguments[i];
                   }
               }
               return max;
             }
*ele vai retornar todos os valores que forem passados, porém nao foi preciso especificar a quantidade de parâmetros

####arrays

####SPREAD
*uma forma de lidar separadamente com elementos de um array (spread)
*o que era parte de um array se torna um elemento independente
*exemplo --> function sum(x, u, z){ 
               return x + y + z;
             }
  
             cont numbers= [1, 2, 3];

             console.log(sum(...numbers));
*o spread é os "..." antes do parâmetro
*se mandar apenas number será um array e valerá só como x, caso usar o spread, 1 = x 2 = y z = 3

####REST
*combina os argumentos em um array
*o que era um elemento independente se torna parte de um array
*exemplo --> function confereTamanho(...args) {
               console.log(args.length)
             }

             confereTamanho() //tamanho zero
             confeteTamanho(1, 2) //tamamnho2
             contefeTamanho(3, 4, 5) //tamanho3

####OBJECT DESTRUCTURING
*entre chaves {} podemos filtrar apenas os dados que nos interessam em um objeto
*exemplo --> const user = {
                id: 42,
                displayName:'jdoe',
                fullName: {
                  firstName: 'John',
                  lastName: 'Doe'
                }
             };

             function userId({id})c{
                return id;
             }
             function getFullName({fullName: {firstName: first, lastName: last}}) {
                return `${first} ${last}`;
             }
             userId(user)
             // 41
             getFullName(user)
             // John Doe