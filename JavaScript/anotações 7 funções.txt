####estrutura 
*function nome(parametros) {
     instruções;
}
*variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela
*quando invocamos o "retunr", a função para de ser executada --> function nome(parametros) {
                                                                     instruções;
                                                                     return; //valor de retorno;
                                                                 }
*uma variável pode armazenar uma função --> const soma = function (a, b) {
                                                              return a + b;
                                                         } 
                                                         soma(1, 2)
                                                         soma(5, 4)

####função auto invocável
*IIFE (ImmediatelyInvoked Function Expression)
*uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada --> (
                                                                                                          function nome(parametros) {
                                                                                                                 let name = "digital innovation one";
                                                                                                                 return name;
                                                                                                          }
                                                                                                          )();
                                                                                                          // digital innovation one
*também pode ser utilizada com parâmetros ou armazenada em uma variável --> (
                                                                            function (a, b) {
                                                                                return a + b;
                                                                            }
                                                                            )(1, 2);

                                                                            const soma = (
                                                                                         function (a, b) {
                                                                                             return a + b;
                                                                                         } 
                                                                            )(5, 4);

####callbacks
*uma função passada como argumento pra outra
*utilizando callbacs você tem maior controle da ordem de chamadas --> const calc = function(operacao, num1, num2){
                                                                                        return operacao(num1, num2);
                                                                                   }
                                                                      const soma = function(num1, num2){
                                                                                        return num1 + num2;
                                                                                   }
                                                                      const sub = function(num1, num2){
                                                                                        return num1 - num2;
                                                                                   }
                                                                      const resultSoma = calc(soma, 1, 2);
                                                                      const resultSub = calc(sub, 1, 2);
                                                                      
                                                                      console.log(reultSub);
                                                                      console.log(resultSoma);

####valores padrão
*atualizações para diminuir código

####arguments
*um array com todos os parâmetros passados quando a função foi invocada
*exemplo --> function findMax() {
               let max = -Infinity;

               for(let i = 0; i< arguments.length; i++) {
                   if (arguments[i] > max) {
                       max = arguments[i];
                   }
               }
               return max;
             }
*ele vai retornar todos os valores que forem passados, porém nao foi preciso especificar a quantidade de parâmetros

####arrays

####SPREAD
*uma forma de lidar separadamente com elementos de um array (spread)
*o que era parte de um array se torna um elemento independente
*exemplo --> function sum(x, u, z){ 
               return x + y + z;
             }
  
             cont numbers= [1, 2, 3];

             console.log(sum(...numbers));
*o spread é os "..." antes do parâmetro
*se mandar apenas number será um array e valerá só como x, caso usar o spread, 1 = x 2 = y z = 3

####REST
*combina os argumentos em um array
*o que era um elemento independente se torna parte de um array
*exemplo --> function confereTamanho(...args) {
               console.log(args.length)
             }

             confereTamanho() //tamanho zero
             confeteTamanho(1, 2) //tamamnho2
             contefeTamanho(3, 4, 5) //tamanho3

####OBJECT DESTRUCTURING
*entre chaves {} podemos filtrar apenas os dados que nos interessam em um objeto
*exemplo --> const user = {
                id: 42,
                displayName:'jdoe',
                fullName: {
                  firstName: 'John',
                  lastName: 'Doe'
                }
             };

             function userId({id})c{
                return id;
             }
             function getFullName({fullName: {firstName: first, lastName: last}}) {
                return `${first} ${last}`;
             }
             userId(user)
             // 41
             getFullName(user)
             // John Doe

####IF / ELSE
*if é a condição por exemplo -->function numeroPositivo(num) {
                                  let resultado;

                                  if (num < 0) (se o número for menor que zero)
*dentro do if dica a declaração 1 por exemplo --> resultado = false (se o numero for menor que zero o resultado é false --> numeroPositivo(2) false
*else é a declaração 2, se a condição um não for satisfeita else é chamado e tido como resultado --> else {
                                                                                                      resultado = true

####SWITCH CASE
*equivale a uma comparação de tipo e valor (===)
*sempre precisa de um valor "default"
*ideal para quando se precisa comparar muitos valores
*exemplo -->function getAnimal(id) {
              switch(id){
                case 1:
                  return "cão";
                case 2:
                  return "gato";
                case 3:
                  return "pássaro";
                default:
                  return "peixe";
              }
            }

####FOR
*loop dentro de elementos iteráveis (arrays, strings)
*exemplo --> function multiplicaPorDois(arr) {
               let multiplicados = [];
               
               for(let i = 0 i < arr.length; i++) {
                  multiplicados.push(arr[i] * 2);
               }
             
              return multiplicados;
             }

             conts meusNumeros = [2, 33, 456, 356, 40]
             multiplicaPorDois(meusNumeros);

####FOR...IN
*loop entre propriedades enumeráveis de um objeto
*exemplo --> function forInExemplo(obj) {
               for(prop in obj) {
                 console.log(prop);
               }
             }
             
             const meuObjeto = {
               nome:"joão",
               idade:"20",
               cidade: "salvador"
             }

             forInExemplo(meuObjeto);
             //nome
             //idade
             //cidade

*exemplo 2 com o for...in --> 
             function forInExemplo(obj) {
               for(prop in obj) {
                 console.log(obj[prop]);
               }
             }
             
             const meuObjeto = {
               nome:"joão",
               idade:"20",
               cidade: "salvador"
             }

             forInExemplo(meuObjeto);
             //joão
             //20
             //salvador

####FOR...OF
*loop entre estruturas interáveis(arrays, strings)
*exemplo 1 -->
             function logLetras(palavra) {
               for(letra of palavra) {
                 console.log(letra);
               }
             }
             
             const palavra = "abacaxi";

             logLetras(palavra);
             //a
             //b
             //a
             //c
             //a
             //x
             //i
*exemplo 2 -->
             function logNumeros(nums) {
               for(num of nums) {
                 console.log(num);
               }
             }
             
             const nums = [30, 20, 233, 2];

             logNumeros(nums);
             //30
             //20
             //233
             //2

####WHILE
*executa instruções até que a condição se torne falsa
*exemplo -->
function exemploWhile() {
  let num = 0;

  while(num <= 5) {
    console.log(num);
    num++
  }
}

exemploWhile()
//0
//1
//2
//3
//4
//5

####DO...WHILE
*executa instruções até que a condição se torne falsa
*porém a primeira execução sempre ocorre
*exemplo -->
function exemploDoWhile() {
  let num = 6;
  
  do {
    console.log(num);
    num++
  } while(num <= 5)
}

exemploDoWhile()
//6

####THIS
*a palavrra reservada this é uma referência de contexto
*no exemplo, this refere-se ao objeto pessoa
*exemplo -->
const pessoa = {
  firstName: "Leonardo",
  lastName: "Toledo",
  id: 1,
  fullName: function() {
    return this.firstName+ " " + this.lastName;
  },
  getId: function() {
    return this.id;
  }
};

pessoa.fullName();
//Leonardo Toledo

pessoa.getId();
//1
*seu valor pode mudar de acordo com o lugar no código onde foi chamada
|       contexto       |              referência                |
| em um objeto(método) |      próprio objeto dono do método     |
|       sozinha        | objeto global (em navegadores, window) |
|        função        |             objeto global              |
|        evento        |      elemento que recebeu o evento     |
